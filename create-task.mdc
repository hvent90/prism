---
description:
globs:
alwaysApply: false
---
# How to Create a New Task

This document provides instructions for creating a new task specification file and registering it within the project. Following this process ensures all new features are well-defined and tracked.

## Step 1: Create the Task Specification File

1.  **Choose a short, descriptive name** for your task (e.g., `realtime_collaboration`).
2.  **Navigate to the `docs/` directory.**
3.  **Create a new markdown file.** The filename must follow the format `XX_task_name.md`, where `XX` is the next sequential number. For example, if the last task was `03_ast_coordinates.md`, your new file should be named `04_realtime_collaboration.md`.

### Task File Template

Use the following markdown template for the content of your new file. This structure is designed to ensure all necessary aspects of the feature are considered before implementation begins.

```markdown
# [Feature Name]

## 📋 **Feature Overview**
*A brief, one-paragraph summary of the feature. What is it, and what problem does it solve?*

## 🎯 **Goals**
- *Primary goal 1*
- *Primary goal 2*
- *Secondary goal*

## 🔧 **Technical Requirements**

### **Phase 1 - Core Implementation**
- [ ] *Core requirement 1*
- [ ] *Core requirement 2*

### **Future Phases**
- 🔮 *Potential future enhancement 1*
- 🔮 *Potential future enhancement 2*

## 🏗️ **Implementation Plan**

### **1. Backend Changes**
*Detailed plan for any changes to the Flask server, including new API endpoints, logic changes, or database modifications.*

#### **A. New API Endpoint(s)**
```python
# Example of a new or modified endpoint
@app.route('/api/new-feature', methods=['POST'])
def new_feature():
    # ...
    pass
```

### **2. Frontend Changes**
*Detailed plan for UI and logic changes in the TypeScript application.*

#### **A. New UI Component**
```typescript
// Example of a new component or interface
interface NewFeatureData {
    id: string;
    value: any;
}
```

## ✅ **Technical Decisions**
*Justify the key technical choices for this feature. For example, why a specific library was chosen, or why a certain architectural pattern is being used.*

-   ✅ **Decision 1**: *Justification...*
-   ✅ **Decision 2**: *Justification...*

## 📝 **Acceptance Criteria**
*A checklist of conditions that must be met for the feature to be considered complete.*
- [ ] *User can see the new UI element.*
- [ ] *Clicking the element triggers the correct backend API call.*
- [ ] *The feature works correctly on all supported browsers.*
- [ ] *The feature handles edge cases gracefully (e.g., invalid input).*

## 🧪 **Testing Strategy**
*How the feature will be tested.*
- *Unit tests for new backend logic.*
- *Integration tests for the frontend-backend communication.*
- *End-to-end user workflow testing.*

## 📦 **Files to Create/Modify**
*A list of files that are expected to be created or changed during implementation.*
- `backend/app.py`
- `frontend/src/new-feature.ts`
- `frontend/public/index.html`
- `frontend/public/style.css`
```

## Step 2: Update the Task List

After creating the specification file, you must add it to the main task list to make it visible to the team.

1.  **Open `docs/tasklist.md`.**
2.  **Navigate to the `## 🚀 Current Tasks` section.**
3.  **Add a new item** under the appropriate priority heading (e.g., `### High Priority`).
4.  The item should be a checkbox that links to your new task file.

### Example

```markdown
### **High Priority**
- [ ] **[Feature Name]**: [XX_task_name.md](./XX_task_name.md) - *A very brief description of the task.*
```

By following these two steps, you ensure that new work is properly documented, planned, and tracked.
